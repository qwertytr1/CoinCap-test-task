{"version":3,"file":"static/js/950.480df30b.chunk.js","mappings":"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","sources":["app/coinPage/CoinPage.tsx","app/modals/addCoinsModal/AddCoinsModal.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Spin, Typography, Select } from 'antd';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { CurrencyEntity, CoinPageProps, ChartApiResponse } from '../interfaces';\nimport { httpGet } from '../api/apiHandler';\nimport { format, fromUnixTime } from 'date-fns';\nimport './CoinPage.scss';\nimport AddCoinsModal from '../modals/addCoinsModal/AddCoinsModal';\nimport { useNavigate } from 'react-router-dom';\nconst { Text } = Typography;\nconst { Option } = Select;\n\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n\nconst CoinPage: React.FC<CoinPageProps> = ({ coin, onClose, onAddToPortfolio, chartData: initialChartData }) => {\n    const [chartData, setChartData] = useState(initialChartData || null);\n    const [loading, setLoading] = useState(!initialChartData);\n    const [error, setError] = useState('');\n    const [timeRange, setTimeRange] = useState('d1');\n    const [addCoinsModalVisible, setAddCoinsModalVisible] = useState(false);\n    const navigate = useNavigate();\n    useEffect(() => {\n        const fetchChartData = async (range: string) => {\n            if (initialChartData) return;\n\n            setLoading(true);\n            setError('');\n            try {\n                const response = await httpGet<ChartApiResponse>(`/assets/${coin.id}/history?interval=${range}`);\n                const data = response.data.data;\n\n                const formattedData = {\n                    labels: data.map(entry => format(fromUnixTime(entry.time / 1000), 'dd.MM.yyyy')),\n                    datasets: [\n                        {\n                            label: `Цена ${coin.name} в USD`,\n                            data: data.map(entry => parseFloat(entry.priceUsd)),\n                            borderColor: 'rgba(75, 192, 192, 1)',\n                            fill: false,\n                        },\n                    ],\n                };\n\n                setChartData(formattedData);\n                localStorage.setItem(`chartData_${coin.id}_${range}`, JSON.stringify(formattedData));\n            } catch (error) {\n                setError('Ошибка при загрузке данных графика.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (!initialChartData) {\n            const savedData = localStorage.getItem(`chartData_${coin.id}_${timeRange}`);\n            if (savedData) {\n                setChartData(JSON.parse(savedData));\n                setLoading(false);\n            } else {\n                fetchChartData(timeRange);\n            }\n        }\n    }, [coin.id, coin.name, timeRange, initialChartData]);\n\n    const handleTimeRangeChange = (value: string) => {\n        setTimeRange(value);\n    };\n\n    const handleAddToPortfolio = (coins: CurrencyEntity[]) => {\n        coins.forEach(onAddToPortfolio);\n        setAddCoinsModalVisible(false);\n    };\n    const handleToClose = () => {\n        onClose();\n        navigate(`/`)\n}\n    return (\n        <div className=\"coin-page\">\n            <div className=\"coin-info\">\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexWrap: 'wrap' }}>\n                    <img width={50} src={`https://assets.coincap.io/assets/icons/${coin.symbol.toLowerCase()}@2x.png`} alt=\"Логотип\" />\n                    <div>\n                        <h1>{coin.name}</h1>\n                        <p>Символ: {coin.symbol}</p>\n                        <p>Ранг: {coin.rank}</p>\n                        <p>Предложение: {coin.supply}</p>\n                        <p>Цена в USD: ${coin.priceUsd}</p>\n                        <p>Рыночная капитализация в USD: ${coin.marketCapUsd}</p>\n                        <p>Максимальное предложение: {coin.maxSupply}</p>\n                    </div>\n                </div>\n                <Select defaultValue=\"d1\" style={{ width: 120 }} onChange={handleTimeRangeChange}>\n                    <Option value=\"d1\">1 день</Option>\n                    <Option value=\"h12\">12 часов</Option>\n                    <Option value=\"h1\">1 час</Option>\n                </Select>\n                <Button onClick={handleToClose} style={{ marginTop: '10px' }}>Назад</Button>\n                <Button type=\"primary\" onClick={() => setAddCoinsModalVisible(true)} style={{ marginTop: '10px' }}>Добавить</Button>\n            </div>\n            <div className=\"coin-chart\">\n                {loading ? (\n                    <Spin />\n                ) : error ? (\n                    <Text type=\"danger\">{error}</Text>\n                ) : chartData ? (\n                    <Line data={chartData} options={{\n                        scales: {\n                            x: {\n                                display: true,\n                                title: {\n                                    display: true,\n                                    text: 'Дата',\n                                },\n                            },\n                            y: {\n                                display: true,\n                                title: {\n                                    display: true,\n                                    text: 'Цена в USD',\n                                },\n                            },\n                        },\n                    }} />\n                ) : null}\n            </div>\n            <AddCoinsModal\n                open={addCoinsModalVisible}\n                onClose={() => setAddCoinsModalVisible(false)}\n                coins={[coin]}\n                onAddCoins={handleAddToPortfolio}\n            />\n        </div>\n    );\n};\n\nexport default CoinPage;","import React, { useState } from 'react';\nimport { Modal, Button, InputNumber } from 'antd';\nimport { AddCoinsModalProps } from '../../interfaces';\n\nconst AddCoinsModal: React.FC<AddCoinsModalProps> = ({ open, onClose, coins, onAddCoins }) => {\n  const [coinQuantities, setCoinQuantities] = useState<{ [key: string]: number }>({});\n\n  const handleAddCoins = () => {\n    const selectedCoins = coins\n      .filter(coin => coinQuantities[coin.id] > 0)\n      .map(coin => ({ ...coin, quantity: coinQuantities[coin.id] || 0 }));\n\n    onAddCoins(selectedCoins);\n    setCoinQuantities({});\n    onClose();\n  };\n\n  const handleQuantityChange = (coinId: string, value: number | null) => {\n    setCoinQuantities(prev => ({\n      ...prev,\n      [coinId]: value || 0,\n    }));\n  };\n\n  return (\n    <Modal\n      title=\"Добавление монет\"\n      visible={open}\n      onCancel={onClose}\n      footer={[\n        <Button key=\"cancel\" onClick={onClose}>Отмена</Button>,\n        <Button key=\"add\" type=\"primary\" onClick={handleAddCoins}>Добавить</Button>,\n      ]}\n    >\n      <div>\n        {coins.map(coin => (\n          <div key={coin.id}>\n            <p>{coin.name} ({coin.symbol}) - {coin.priceUsd}</p>\n            <InputNumber\n              min={0}\n              value={coinQuantities[coin.id] || 0}\n              onChange={value => handleQuantityChange(coin.id, value)}\n            />\n            <p>Сумма: {((coinQuantities[coin.id] || 0) * parseFloat(coin.priceUsd)).toFixed(2)}</p>\n          </div>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddCoinsModal;\n"],"names":["Text","Typography","Option","Select","Chart","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","_ref","coin","onClose","onAddToPortfolio","chartData","initialChartData","setChartData","useState","loading","setLoading","error","setError","timeRange","setTimeRange","addCoinsModalVisible","setAddCoinsModalVisible","navigate","useNavigate","useEffect","savedData","localStorage","getItem","concat","id","JSON","parse","async","data","httpGet","range","formattedData","labels","map","entry","format","fromUnixTime","time","datasets","label","name","parseFloat","priceUsd","borderColor","fill","setItem","stringify","fetchChartData","_jsxs","className","children","style","display","alignItems","justifyContent","flexWrap","_jsx","width","src","symbol","toLowerCase","alt","rank","supply","marketCapUsd","maxSupply","defaultValue","onChange","value","Button","onClick","handleToClose","marginTop","type","Spin","Line","options","scales","x","title","text","y","AddCoinsModal","open","coins","onAddCoins","forEach","coinQuantities","setCoinQuantities","Modal","visible","onCancel","footer","handleAddCoins","selectedCoins","filter","quantity","InputNumber","min","handleQuantityChange","coinId","prev","toFixed"],"sourceRoot":""}